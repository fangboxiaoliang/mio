// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline.proto

package protobuf

/*
target package name
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PipelineRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRequest) Reset()         { *m = PipelineRequest{} }
func (m *PipelineRequest) String() string { return proto.CompactTextString(m) }
func (*PipelineRequest) ProtoMessage()    {}
func (*PipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_e7a7ea43be5e3bfe, []int{0}
}
func (m *PipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineRequest.Unmarshal(m, b)
}
func (m *PipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineRequest.Marshal(b, m, deterministic)
}
func (dst *PipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRequest.Merge(dst, src)
}
func (m *PipelineRequest) XXX_Size() int {
	return xxx_messageInfo_PipelineRequest.Size(m)
}
func (m *PipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRequest proto.InternalMessageInfo

func (m *PipelineRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PipelineResponse struct {
	Code                 int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *PipelineRequest `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PipelineResponse) Reset()         { *m = PipelineResponse{} }
func (m *PipelineResponse) String() string { return proto.CompactTextString(m) }
func (*PipelineResponse) ProtoMessage()    {}
func (*PipelineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_e7a7ea43be5e3bfe, []int{1}
}
func (m *PipelineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineResponse.Unmarshal(m, b)
}
func (m *PipelineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineResponse.Marshal(b, m, deterministic)
}
func (dst *PipelineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineResponse.Merge(dst, src)
}
func (m *PipelineResponse) XXX_Size() int {
	return xxx_messageInfo_PipelineResponse.Size(m)
}
func (m *PipelineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineResponse proto.InternalMessageInfo

func (m *PipelineResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PipelineResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PipelineResponse) GetData() *PipelineRequest {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PipelineRequest)(nil), "protobuf.PipelineRequest")
	proto.RegisterType((*PipelineResponse)(nil), "protobuf.PipelineResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineServiceClient interface {
	CreateBuildConfig(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineResponse, error)
	Watch(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineResponse, error)
}

type pipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineServiceClient(cc *grpc.ClientConn) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) CreateBuildConfig(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineResponse, error) {
	out := new(PipelineResponse)
	err := c.cc.Invoke(ctx, "/protobuf.PipelineService/CreateBuildConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Watch(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineResponse, error) {
	out := new(PipelineResponse)
	err := c.cc.Invoke(ctx, "/protobuf.PipelineService/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
type PipelineServiceServer interface {
	CreateBuildConfig(context.Context, *PipelineRequest) (*PipelineResponse, error)
	Watch(context.Context, *PipelineRequest) (*PipelineResponse, error)
}

func RegisterPipelineServiceServer(s *grpc.Server, srv PipelineServiceServer) {
	s.RegisterService(&_PipelineService_serviceDesc, srv)
}

func _PipelineService_CreateBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreateBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PipelineService/CreateBuildConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreateBuildConfig(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PipelineService/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Watch(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuildConfig",
			Handler:    _PipelineService_CreateBuildConfig_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _PipelineService_Watch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline.proto",
}

func init() { proto.RegisterFile("pipeline.proto", fileDescriptor_pipeline_e7a7ea43be5e3bfe) }

var fileDescriptor_pipeline_e7a7ea43be5e3bfe = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xbb, 0x4e, 0x03, 0x31,
	0x10, 0x45, 0x31, 0x24, 0x3c, 0x06, 0xf1, 0x9a, 0x6a, 0x93, 0x2a, 0xda, 0x2a, 0x12, 0xe0, 0x22,
	0xfc, 0x00, 0xda, 0xb4, 0x14, 0x2b, 0x53, 0x50, 0x3b, 0xeb, 0x49, 0x62, 0x29, 0x78, 0xcc, 0xda,
	0x9b, 0xff, 0xe1, 0x4f, 0x11, 0x0e, 0xd6, 0x02, 0x82, 0x26, 0x95, 0x3d, 0xba, 0x77, 0x8e, 0x8e,
	0x06, 0x2e, 0xbd, 0xf5, 0xb4, 0xb1, 0x8e, 0xa4, 0x6f, 0x39, 0x32, 0x9e, 0xa6, 0x67, 0xd1, 0x2d,
	0xcb, 0x5b, 0xb8, 0xaa, 0xbf, 0x32, 0x45, 0x6f, 0x1d, 0x85, 0x88, 0x05, 0x9c, 0xbc, 0x52, 0x08,
	0x7a, 0x45, 0x85, 0x98, 0x88, 0xe9, 0x99, 0xca, 0x63, 0xc9, 0x70, 0xdd, 0x97, 0x83, 0x67, 0x17,
	0x08, 0x11, 0x06, 0x0d, 0x9b, 0x5d, 0x75, 0xa8, 0xd2, 0xff, 0x3b, 0xe1, 0xf0, 0x07, 0x01, 0xef,
	0x61, 0x60, 0x74, 0xd4, 0xc5, 0xd1, 0x44, 0x4c, 0xcf, 0x67, 0x23, 0x99, 0x3d, 0xe4, 0x2f, 0x09,
	0x95, 0x6a, 0xb3, 0x77, 0xd1, 0xeb, 0x3d, 0x53, 0xbb, 0xb5, 0x0d, 0xe1, 0x13, 0xdc, 0xcc, 0x5b,
	0xd2, 0x91, 0xaa, 0xce, 0x6e, 0xcc, 0x9c, 0xdd, 0xd2, 0xae, 0xf0, 0x7f, 0xd2, 0x78, 0xfc, 0x57,
	0xb4, 0x93, 0x2f, 0x0f, 0xf0, 0x11, 0x86, 0x2f, 0x3a, 0x36, 0xeb, 0xbd, 0x09, 0xd5, 0x1d, 0x8c,
	0x2c, 0x4b, 0x43, 0x5b, 0xf6, 0x41, 0xae, 0xad, 0x63, 0x43, 0x32, 0x9f, 0xbb, 0xba, 0xc8, 0x0b,
	0xf5, 0x27, 0xa1, 0x16, 0x8b, 0xe3, 0x84, 0x7a, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0x58, 0xd1,
	0x6e, 0x4c, 0x92, 0x01, 0x00, 0x00,
}
