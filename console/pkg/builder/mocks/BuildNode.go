// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import command "hidevops.io/mio/console/pkg/command"
import mock "github.com/stretchr/testify/mock"

// BuildNode is an autogenerated mock type for the BuildNode type
type BuildNode struct {
	mock.Mock
}

// CreateServiceNode provides a mock function with given fields: node
func (_m *BuildNode) CreateServiceNode(node *command.ServiceNode) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*command.ServiceNode) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeployment provides a mock function with given fields: name, namespace
func (_m *BuildNode) DeleteDeployment(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: node
func (_m *BuildNode) Start(node *command.DeployNode) (string, error) {
	ret := _m.Called(node)

	var r0 string
	if rf, ok := ret.Get(0).(func(*command.DeployNode) string); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*command.DeployNode) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: name, namespace
func (_m *BuildNode) Update(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
