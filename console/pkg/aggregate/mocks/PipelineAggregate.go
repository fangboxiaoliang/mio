// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import v1alpha1 "hidevops.io/mio/pkg/apis/mio/v1alpha1"

// PipelineAggregate is an autogenerated mock type for the PipelineAggregate type
type PipelineAggregate struct {
	mock.Mock
}

// Create provides a mock function with given fields: pipelineConfig, sourceCode
func (_m *PipelineAggregate) Create(pipelineConfig *v1alpha1.PipelineConfig, sourceCode string) (*v1alpha1.Pipeline, error) {
	ret := _m.Called(pipelineConfig, sourceCode)

	var r0 *v1alpha1.Pipeline
	if rf, ok := ret.Get(0).(func(*v1alpha1.PipelineConfig, string) *v1alpha1.Pipeline); ok {
		r0 = rf(pipelineConfig, sourceCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.PipelineConfig, string) error); ok {
		r1 = rf(pipelineConfig, sourceCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name, namespace
func (_m *PipelineAggregate) Get(name string, namespace string) (*v1alpha1.Pipeline, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1alpha1.Pipeline
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.Pipeline); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Selector provides a mock function with given fields: pipeline
func (_m *PipelineAggregate) Selector(pipeline *v1alpha1.Pipeline) error {
	ret := _m.Called(pipeline)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Pipeline) error); ok {
		r0 = rf(pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: name, namespace
func (_m *PipelineAggregate) Watch(name string, namespace string) (*v1alpha1.Pipeline, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1alpha1.Pipeline
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.Pipeline); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
