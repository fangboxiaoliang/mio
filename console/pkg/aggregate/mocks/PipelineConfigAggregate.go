// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import command "hidevops.io/mio/console/pkg/command"
import mock "github.com/stretchr/testify/mock"
import v1alpha1 "hidevops.io/mio/pkg/apis/mio/v1alpha1"

// PipelineConfigAggregate is an autogenerated mock type for the PipelineConfigAggregate type
type PipelineConfigAggregate struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, namespace, pipelineConfig
func (_m *PipelineConfigAggregate) Create(name string, namespace string, pipelineConfig *v1alpha1.PipelineConfig) (*v1alpha1.PipelineConfig, error) {
	ret := _m.Called(name, namespace, pipelineConfig)

	var r0 *v1alpha1.PipelineConfig
	if rf, ok := ret.Get(0).(func(string, string, *v1alpha1.PipelineConfig) *v1alpha1.PipelineConfig); ok {
		r0 = rf(name, namespace, pipelineConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *v1alpha1.PipelineConfig) error); ok {
		r1 = rf(name, namespace, pipelineConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name, namespace
func (_m *PipelineConfigAggregate) Get(name string, namespace string) (*v1alpha1.PipelineConfig, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1alpha1.PipelineConfig
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.PipelineConfig); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPipelineConfigTemplate provides a mock function with given fields: PipelineConfigTemplate
func (_m *PipelineConfigAggregate) NewPipelineConfigTemplate(PipelineConfigTemplate *command.PipelineConfigTemplate) (*v1alpha1.PipelineConfig, error) {
	ret := _m.Called(PipelineConfigTemplate)

	var r0 *v1alpha1.PipelineConfig
	if rf, ok := ret.Get(0).(func(*command.PipelineConfigTemplate) *v1alpha1.PipelineConfig); ok {
		r0 = rf(PipelineConfigTemplate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*command.PipelineConfigTemplate) error); ok {
		r1 = rf(PipelineConfigTemplate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPipelineConfig provides a mock function with given fields: cmd
func (_m *PipelineConfigAggregate) StartPipelineConfig(cmd *command.PipelineStart) (*v1alpha1.PipelineConfig, error) {
	ret := _m.Called(cmd)

	var r0 *v1alpha1.PipelineConfig
	if rf, ok := ret.Get(0).(func(*command.PipelineStart) *v1alpha1.PipelineConfig); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*command.PipelineStart) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
