// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import v1alpha1 "hidevops.io/mio/pkg/apis/mio/v1alpha1"

// DeploymentAggregate is an autogenerated mock type for the DeploymentAggregate type
type DeploymentAggregate struct {
	mock.Mock
}

// Create provides a mock function with given fields: deploymentConfig, pipelineName, version, buildVersion
func (_m *DeploymentAggregate) Create(deploymentConfig *v1alpha1.DeploymentConfig, pipelineName string, version string, buildVersion string) (*v1alpha1.Deployment, error) {
	ret := _m.Called(deploymentConfig, pipelineName, version, buildVersion)

	var r0 *v1alpha1.Deployment
	if rf, ok := ret.Get(0).(func(*v1alpha1.DeploymentConfig, string, string, string) *v1alpha1.Deployment); ok {
		r0 = rf(deploymentConfig, pipelineName, version, buildVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.DeploymentConfig, string, string, string) error); ok {
		r1 = rf(deploymentConfig, pipelineName, version, buildVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApp provides a mock function with given fields: deploy
func (_m *DeploymentAggregate) CreateApp(deploy *v1alpha1.Deployment) error {
	ret := _m.Called(deploy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Deployment) error); ok {
		r0 = rf(deploy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Selector provides a mock function with given fields: deploy
func (_m *DeploymentAggregate) Selector(deploy *v1alpha1.Deployment) error {
	ret := _m.Called(deploy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Deployment) error); ok {
		r0 = rf(deploy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: name, namespace
func (_m *DeploymentAggregate) Watch(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
